// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/storage.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "github.com/nedokyrill/posts-service/internal/models"
)

// MockPostStorage is a mock of PostStorage interface.
type MockPostStorage struct {
	ctrl     *gomock.Controller
	recorder *MockPostStorageMockRecorder
}

// MockPostStorageMockRecorder is the mock recorder for MockPostStorage.
type MockPostStorageMockRecorder struct {
	mock *MockPostStorage
}

// NewMockPostStorage creates a new mock instance.
func NewMockPostStorage(ctrl *gomock.Controller) *MockPostStorage {
	mock := &MockPostStorage{ctrl: ctrl}
	mock.recorder = &MockPostStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostStorage) EXPECT() *MockPostStorageMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockPostStorage) CreatePost(ctx context.Context, post models.Post) (models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", ctx, post)
	ret0, _ := ret[0].(models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostStorageMockRecorder) CreatePost(ctx, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostStorage)(nil).CreatePost), ctx, post)
}

// GetAllPosts mocks base method.
func (m *MockPostStorage) GetAllPosts(ctx context.Context, offset, limit int) ([]*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPosts", ctx, offset, limit)
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPosts indicates an expected call of GetAllPosts.
func (mr *MockPostStorageMockRecorder) GetAllPosts(ctx, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPosts", reflect.TypeOf((*MockPostStorage)(nil).GetAllPosts), ctx, offset, limit)
}

// GetPostByID mocks base method.
func (m *MockPostStorage) GetPostByID(ctx context.Context, postId uuid.UUID) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostByID", ctx, postId)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostByID indicates an expected call of GetPostByID.
func (mr *MockPostStorageMockRecorder) GetPostByID(ctx, postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostByID", reflect.TypeOf((*MockPostStorage)(nil).GetPostByID), ctx, postId)
}

// MockCommentStorage is a mock of CommentStorage interface.
type MockCommentStorage struct {
	ctrl     *gomock.Controller
	recorder *MockCommentStorageMockRecorder
}

// MockCommentStorageMockRecorder is the mock recorder for MockCommentStorage.
type MockCommentStorageMockRecorder struct {
	mock *MockCommentStorage
}

// NewMockCommentStorage creates a new mock instance.
func NewMockCommentStorage(ctrl *gomock.Controller) *MockCommentStorage {
	mock := &MockCommentStorage{ctrl: ctrl}
	mock.recorder = &MockCommentStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentStorage) EXPECT() *MockCommentStorageMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockCommentStorage) CreateComment(ctx context.Context, comment models.Comment) (models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, comment)
	ret0, _ := ret[0].(models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockCommentStorageMockRecorder) CreateComment(ctx, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockCommentStorage)(nil).CreateComment), ctx, comment)
}

// GetCommentsByPostID mocks base method.
func (m *MockCommentStorage) GetCommentsByPostID(ctx context.Context, postID uuid.UUID, offset, limit int) ([]*models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsByPostID", ctx, postID, offset, limit)
	ret0, _ := ret[0].([]*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsByPostID indicates an expected call of GetCommentsByPostID.
func (mr *MockCommentStorageMockRecorder) GetCommentsByPostID(ctx, postID, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsByPostID", reflect.TypeOf((*MockCommentStorage)(nil).GetCommentsByPostID), ctx, postID, offset, limit)
}

// GetRepliesByParentCommentID mocks base method.
func (m *MockCommentStorage) GetRepliesByParentCommentID(ctx context.Context, parentCommentID uuid.UUID) ([]*models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepliesByParentCommentID", ctx, parentCommentID)
	ret0, _ := ret[0].([]*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepliesByParentCommentID indicates an expected call of GetRepliesByParentCommentID.
func (mr *MockCommentStorageMockRecorder) GetRepliesByParentCommentID(ctx, parentCommentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepliesByParentCommentID", reflect.TypeOf((*MockCommentStorage)(nil).GetRepliesByParentCommentID), ctx, parentCommentID)
}
