// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "github.com/nedokyrill/posts-service/internal/models"
)

// MockPostService is a mock of PostService interface.
type MockPostService struct {
	ctrl     *gomock.Controller
	recorder *MockPostServiceMockRecorder
}

// MockPostServiceMockRecorder is the mock recorder for MockPostService.
type MockPostServiceMockRecorder struct {
	mock *MockPostService
}

// NewMockPostService creates a new mock instance.
func NewMockPostService(ctrl *gomock.Controller) *MockPostService {
	mock := &MockPostService{ctrl: ctrl}
	mock.recorder = &MockPostServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostService) EXPECT() *MockPostServiceMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockPostService) CreatePost(ctx context.Context, postReq models.PostRequest) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", ctx, postReq)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostServiceMockRecorder) CreatePost(ctx, postReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostService)(nil).CreatePost), ctx, postReq)
}

// GetAllPosts mocks base method.
func (m *MockPostService) GetAllPosts(ctx context.Context, page *int32) ([]*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPosts", ctx, page)
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPosts indicates an expected call of GetAllPosts.
func (mr *MockPostServiceMockRecorder) GetAllPosts(ctx, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPosts", reflect.TypeOf((*MockPostService)(nil).GetAllPosts), ctx, page)
}

// GetPostByID mocks base method.
func (m *MockPostService) GetPostByID(ctx context.Context, id uuid.UUID) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostByID", ctx, id)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostByID indicates an expected call of GetPostByID.
func (mr *MockPostServiceMockRecorder) GetPostByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostByID", reflect.TypeOf((*MockPostService)(nil).GetPostByID), ctx, id)
}

// MockCommentService is a mock of CommentService interface.
type MockCommentService struct {
	ctrl     *gomock.Controller
	recorder *MockCommentServiceMockRecorder
}

// MockCommentServiceMockRecorder is the mock recorder for MockCommentService.
type MockCommentServiceMockRecorder struct {
	mock *MockCommentService
}

// NewMockCommentService creates a new mock instance.
func NewMockCommentService(ctrl *gomock.Controller) *MockCommentService {
	mock := &MockCommentService{ctrl: ctrl}
	mock.recorder = &MockCommentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentService) EXPECT() *MockCommentServiceMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockCommentService) CreateComment(ctx context.Context, commReq models.CommentRequest) (*models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, commReq)
	ret0, _ := ret[0].(*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockCommentServiceMockRecorder) CreateComment(ctx, commReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockCommentService)(nil).CreateComment), ctx, commReq)
}

// GetCommentsByPostID mocks base method.
func (m *MockCommentService) GetCommentsByPostID(ctx context.Context, postID uuid.UUID, page *int32) ([]*models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsByPostID", ctx, postID, page)
	ret0, _ := ret[0].([]*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsByPostID indicates an expected call of GetCommentsByPostID.
func (mr *MockCommentServiceMockRecorder) GetCommentsByPostID(ctx, postID, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsByPostID", reflect.TypeOf((*MockCommentService)(nil).GetCommentsByPostID), ctx, postID, page)
}

// GetRepliesByComment mocks base method.
func (m *MockCommentService) GetRepliesByComment(ctx context.Context, commentID uuid.UUID) ([]*models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepliesByComment", ctx, commentID)
	ret0, _ := ret[0].([]*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepliesByComment indicates an expected call of GetRepliesByComment.
func (mr *MockCommentServiceMockRecorder) GetRepliesByComment(ctx, commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepliesByComment", reflect.TypeOf((*MockCommentService)(nil).GetRepliesByComment), ctx, commentID)
}

// MockViewerService is a mock of ViewerService interface.
type MockViewerService struct {
	ctrl     *gomock.Controller
	recorder *MockViewerServiceMockRecorder
}

// MockViewerServiceMockRecorder is the mock recorder for MockViewerService.
type MockViewerServiceMockRecorder struct {
	mock *MockViewerService
}

// NewMockViewerService creates a new mock instance.
func NewMockViewerService(ctrl *gomock.Controller) *MockViewerService {
	mock := &MockViewerService{ctrl: ctrl}
	mock.recorder = &MockViewerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockViewerService) EXPECT() *MockViewerServiceMockRecorder {
	return m.recorder
}

// CreateViewer mocks base method.
func (m *MockViewerService) CreateViewer(ctx context.Context, postId uuid.UUID) (int, chan *models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateViewer", ctx, postId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(chan *models.Comment)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateViewer indicates an expected call of CreateViewer.
func (mr *MockViewerServiceMockRecorder) CreateViewer(ctx, postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateViewer", reflect.TypeOf((*MockViewerService)(nil).CreateViewer), ctx, postId)
}

// DeleteViewer mocks base method.
func (m *MockViewerService) DeleteViewer(ctx context.Context, postId uuid.UUID, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteViewer", ctx, postId, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteViewer indicates an expected call of DeleteViewer.
func (mr *MockViewerServiceMockRecorder) DeleteViewer(ctx, postId, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteViewer", reflect.TypeOf((*MockViewerService)(nil).DeleteViewer), ctx, postId, id)
}

// NotifyViewers mocks base method.
func (m *MockViewerService) NotifyViewers(ctx context.Context, postId uuid.UUID, comment models.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyViewers", ctx, postId, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyViewers indicates an expected call of NotifyViewers.
func (mr *MockViewerServiceMockRecorder) NotifyViewers(ctx, postId, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyViewers", reflect.TypeOf((*MockViewerService)(nil).NotifyViewers), ctx, postId, comment)
}
