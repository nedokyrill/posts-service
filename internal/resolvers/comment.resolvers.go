package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.80

import (
	"context"
	"errors"

	"github.com/google/uuid"
	graphql1 "github.com/nedokyrill/posts-service/graphql"
	"github.com/nedokyrill/posts-service/internal/models"
	"github.com/nedokyrill/posts-service/pkg/utils"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Replies is the resolver for the replies field.
func (r *commentResolver) Replies(ctx context.Context, obj *models.Comment) ([]*models.Comment, error) {
	comments, err := r.CommentService.GetRepliesByComment(obj.ID)
	if err != nil {
		var errr utils.GqlError
		errors.As(err, &errr)
		return nil, &gqlerror.Error{Extensions: errr.Extensions()}
	}

	return comments, nil
}

// AddComment is the resolver for the AddComment field.
func (r *mutationResolver) AddComment(ctx context.Context, author string, content string, postID uuid.UUID,
	parentCommentID *uuid.UUID) (*models.Comment, error) {
	comment, err := r.CommentService.CreateComment(author, content, postID, parentCommentID)
	if err != nil {
		var errr utils.GqlError
		errors.As(err, &errr)
		return nil, &gqlerror.Error{Extensions: errr.Extensions()}
	}

	if err = r.ViewerService.NotifyViewers(postID, *comment); err != nil {
		var errr utils.GqlError
		errors.As(err, &errr)
		return nil, &gqlerror.Error{Extensions: errr.Extensions()}
	}

	return comment, nil
}

// SubOnPost is the resolver for the SubOnPost field.
func (r *subscriptionResolver) SubOnPost(ctx context.Context, postID uuid.UUID) (<-chan *models.Comment, error) {
	id, ch, err := r.ViewerService.CreateViewer(postID)
	if err != nil {
		var errr utils.GqlError
		errors.As(err, &errr)
		return nil, &gqlerror.Error{Extensions: errr.Extensions()}
	}

	errCh := make(chan utils.GqlError)
	go func() {
		<-ctx.Done()
		err = r.ViewerService.DeleteViewer(postID, id)
		if err != nil {
			var errr utils.GqlError
			errors.As(err, &errr)
			errCh <- errr
		}
		errCh <- utils.GqlError{}
	}()

	errChan := <-errCh
	if len(errChan.Msg) != 0 {
		return nil, &gqlerror.Error{Extensions: errChan.Extensions()}
	}

	return ch, nil
}

// Comment returns graphql1.CommentResolver implementation.
func (r *Resolver) Comment() graphql1.CommentResolver { return &commentResolver{r} }

// Subscription returns graphql1.SubscriptionResolver implementation.
func (r *Resolver) Subscription() graphql1.SubscriptionResolver { return &subscriptionResolver{r} }

type commentResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
