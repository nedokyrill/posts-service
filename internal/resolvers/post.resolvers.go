package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.80

import (
	"context"
	"errors"

	"github.com/google/uuid"
	graphql1 "github.com/nedokyrill/posts-service/graphql"
	"github.com/nedokyrill/posts-service/internal/models"
	"github.com/nedokyrill/posts-service/pkg/utils"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// CreatePost is the resolver for the CreatePost field.
func (r *mutationResolver) CreatePost(ctx context.Context, title string, author *string, content string,
	isCommentAllowed bool) (*models.Post, error) {
	post, err := r.PostService.CreatePost(ctx, title, author, content, isCommentAllowed)
	if err != nil {
		var errr utils.GqlError
		errors.As(err, &errr)
		return nil, &gqlerror.Error{Extensions: errr.Extensions()}
	}

	return post, nil
}

// Comments is the resolver for the comments field.
func (r *postResolver) Comments(ctx context.Context, obj *models.Post, page *int32) ([]*models.Comment, error) {
	comments, err := r.CommentService.GetCommentsByPostID(ctx, obj.ID, page)
	if err != nil {
		var errr utils.GqlError
		errors.As(err, &errr)
		return nil, &gqlerror.Error{Extensions: errr.Extensions()}
	}
	return comments, nil
}

// GetAllPosts is the resolver for the GetAllPosts field.
func (r *queryResolver) GetAllPosts(ctx context.Context, page *int32) ([]*models.Post, error) {
	posts, err := r.PostService.GetAllPosts(ctx, page)
	if err != nil {
		var errr utils.GqlError
		errors.As(err, &errr)
		return nil, &gqlerror.Error{Extensions: errr.Extensions()}
	}

	return posts, nil
}

// GetPostByID is the resolver for the GetPostById field.
func (r *queryResolver) GetPostByID(ctx context.Context, id *uuid.UUID) (*models.Post, error) {
	post, err := r.PostService.GetPostByID(ctx, id)
	if err != nil {
		var errr utils.GqlError
		errors.As(err, &errr)
		return nil, &gqlerror.Error{Extensions: errr.Extensions()}
	}
	return post, nil
}

// Mutation returns graphql1.MutationResolver implementation.
func (r *Resolver) Mutation() graphql1.MutationResolver { return &mutationResolver{r} }

// Post returns graphql1.PostResolver implementation.
func (r *Resolver) Post() graphql1.PostResolver { return &postResolver{r} }

// Query returns graphql1.QueryResolver implementation.
func (r *Resolver) Query() graphql1.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type postResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
