package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.80

import (
	"context"
	"fmt"

	"github.com/google/uuid"
	"github.com/nedokyrill/posts-service/internal/models"
)

// Replies is the resolver for the replies field.
func (r *commentResolver) Replies(ctx context.Context, obj *models.Comment) ([]*models.Comment, error) {
	panic(fmt.Errorf("not implemented: Replies - replies"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *commentResolver) CreatedAt(ctx context.Context, obj *models.Comment) (*string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// AddComment is the resolver for the AddComment field.
func (r *mutationResolver) AddComment(ctx context.Context, author string, content string, postID uuid.UUID, parentCommentID *uuid.UUID) (*models.Comment, error) {
	panic(fmt.Errorf("not implemented: AddComment - AddComment"))
}

// SubOnPost is the resolver for the SubOnPost field.
func (r *subscriptionResolver) SubOnPost(ctx context.Context, postID uuid.UUID) (<-chan *models.Comment, error) {
	panic(fmt.Errorf("not implemented: SubOnPost - SubOnPost"))
}

// Comment returns CommentResolver implementation.
func (r *Resolver) Comment() CommentResolver { return &commentResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type commentResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
